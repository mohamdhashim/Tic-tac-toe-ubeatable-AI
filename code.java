/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package words_game;

import java.util.Random;
import java.util.*;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class Starting extends javax.swing.JFrame {

    /**
     * Creates new form Starting
     */
    
    
    
    public Starting() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        _1_1 = new javax.swing.JButton();
        _1_2 = new javax.swing.JButton();
        _2_0 = new javax.swing.JButton();
        _2_1 = new javax.swing.JButton();
        _2_2 = new javax.swing.JButton();
        _0_2 = new javax.swing.JButton();
        _0_1 = new javax.swing.JButton();
        _0_0 = new javax.swing.JButton();
        _1_0 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        _1_1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _1_1.setText("_");
        _1_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _1_1ActionPerformed(evt);
            }
        });

        _1_2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _1_2.setText("_");
        _1_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _1_2ActionPerformed(evt);
            }
        });

        _2_0.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _2_0.setText("_");
        _2_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _2_0ActionPerformed(evt);
            }
        });

        _2_1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _2_1.setText("_");
        _2_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _2_1ActionPerformed(evt);
            }
        });

        _2_2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _2_2.setText("_");
        _2_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _2_2ActionPerformed(evt);
            }
        });

        _0_2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _0_2.setText("_");
        _0_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _0_2ActionPerformed(evt);
            }
        });

        _0_1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _0_1.setText("_");
        _0_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _0_1ActionPerformed(evt);
            }
        });

        _0_0.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _0_0.setText("_");
        _0_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _0_0ActionPerformed(evt);
            }
        });

        _1_0.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        _1_0.setText("_");
        _1_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _1_0ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        jLabel1.setText("    Unbeatable AI  :(");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_2_0, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_0_0, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(_0_1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(_0_2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(_1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(_1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(_2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(_2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_0_2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_0_1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_0_0, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_2_0, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

// Start of AImaxmin alogrithm ;     
    static class move
    {
        public int row,col;
    
    };
    char board[][] = {{ '_', '_', '_' }, 
                          { '_', '_', '_' }, 
                          { '_', '_', '_' }}; 
            
    static char player = 'o',ai = 'x';
    
    static  Boolean isMovesleft(char board[][])
    {
        for(int i=0;i<3;i++)
            for(int j=0;j<3;j++)
                if(board[i][j]=='_')
                    return true;
        
        return false;
    }

    static int evaluate(char board[][])
    {
        //check raws if anyone has won;
        for(int i=0;i<3;i++)
        {
            if(board[i][0] == board[i][1] && board[i][1] == board[i][2])
                if(board[i][0]==player)
                    return -10;
                else if(board[i][0]==ai)
                    return +10;
            
        }
        
        //check coulms if anyone has won;
        for(int j=0;j<3;j++)
        {
            if(board[0][j] == board[1][j] && board[1][j] == board[2][j])
                if(board[0][j] == player)
                    return -10;
                else if(board[0][j] == ai)
                    return +10; 
            
        }
        // check [0][0] diagonal;
        if(board[0][0]==board[1][1] && board[1][1]==board[2][2])
           if(board[0][0]==player)
               return -10;
           else if(board[0][0]==ai)
               return +10;
        
        //check [0][2] diagonal;
        if(board[0][2]==board[1][1] && board[1][1]==board[2][0])
           if(board[0][2]==player)
               return -10;
           else if(board[0][2]==ai)
               return +10;   
        
        // if no one wins on the board 
        return 0;
    }
    
    
    
    static int minimax(char board[][],int dep , Boolean isAI)
    {
        //Evaluate board to see who has one in current node x or O
        int score = evaluate(board);
        
        // if ai(maximizer) has won or if player (minimizer) has won;
        if(score == 10 || score == -10)
            return score - dep;
        
        
   
        //if game is tie;
        if(isMovesleft(board) == false)
            return 0-dep;
        
        //check if AI(maximizer) turn 
        if(isAI)
        {
            int max = -1000;
            
            //loop on all empty places;
            for(int i=0;i<3;i++)
            {
                for(int j=0;j<3;j++)
                {
                    // chec if cell empty
                    if(board[i][j]=='_')
                    {
                        // make the move
                        board[i][j]= ai;
                        
                        //its player turn 
                        //we want to minimize his socre;
                        
                        max = Math.max(max,minimax(board, dep + 1, !isAI));
                        
                        //make cell empty again (undo move)
                        board[i][j] = '_';
                    }
                }
            }
            return max;
        }else
        {
            int min = 1000;
            
            //loop on all empty places;
            for(int i=0;i<3;i++)
            {
                for(int j=0;j<3;j++)
                {
                    // chec if cell empty
                    if(board[i][j]=='_')
                    {
                        // make the move
                        board[i][j]= player;
                        
                        //its AI turn 
                        //we want to minimize his socre;
                        
                        min = Math.min(min,minimax(board, dep+1, !isAI));
                        
                        //make cell empty again (undo move)
                        board[i][j] = '_';
                    }
                }
            }
            return min;
        }
    }
    
    
    static move findBestmove(char board[][])
    {
        int max_move = -1000;
        move bestMove = new move();
        bestMove.row = -1;
        bestMove.col = -1;
        
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(board[i][j]=='_')
                {
                    
                    board[i][j]= ai;
                    
                    int moveVal = minimax(board, 0, false);
                    
                    board[i][j]='_';
                    
                    if(moveVal > max_move)
                    {
                        bestMove.col = j;
                        bestMove.row = i;
                        max_move = moveVal;
                    }
                }
            }
        }
  
         return bestMove; 
    }
    
    public  static void display(char board[][])
    {
        _0_0.setText(Character.toString(board[0][0]));
        _0_1.setText(Character.toString(board[0][1])); 
        _0_2.setText(Character.toString(board[0][2])); 
        _1_0.setText(Character.toString(board[1][0])); 
        _1_1.setText(Character.toString(board[1][1])); 
        _1_2.setText(Character.toString(board[1][2])); 
        _2_0.setText(Character.toString(board[2][0])); 
        _2_1.setText(Character.toString(board[2][1])); 
        _2_2.setText(Character.toString(board[2][2])); 
        
        if(board[0][0]!='_')
            _0_0.setEnabled(false);
        else
            _0_0.setEnabled(true);
        

        if(board[0][1]!='_')
            _0_1.setEnabled(false);
        else
            _0_1.setEnabled(true);
        
        if(board[0][2]!='_')
            _0_2.setEnabled(false);
        else
            _0_2.setEnabled(true);   
        
        if(board[1][0]!='_')
            _1_0.setEnabled(false);
        else
            _1_0.setEnabled(true);

        if(board[1][1]!='_')
            _1_1.setEnabled(false);
        else
            _1_1.setEnabled(true);


        if(board[1][2]!='_')
            _1_2.setEnabled(false);
        else
            _1_2.setEnabled(true);

        if(board[2][0]!='_')
            _2_0.setEnabled(false);
        else
            _2_0.setEnabled(true);

        if(board[2][1]!='_')
            _2_1.setEnabled(false);
        else
            _2_1.setEnabled(true);

        if(board[2][2]!='_')
            _2_2.setEnabled(false);
        else
            _2_2.setEnabled(true);

   
    }
// end of AImaxmin alogrithm ;    
    Boolean AIplayed = false;
    
    boolean Check()
    {
        if(evaluate(board)<0)
        {
            JOptionPane.showMessageDialog(rootPane, "AI has won. \nlet's play again");
            for(int i=0;i<3;i++)
                for(int j=0;j<3;j++)
                    board[i][j]='_';
            
            display(board);
            return true;
        }
        return false;
    }  
    
    boolean tie()
    {
            if(!isMovesleft(board))
            {
                JOptionPane.showMessageDialog(rootPane, "The game is Tie. \nlet's play again");
                for(int i=0;i<3;i++)
                    for(int j=0;j<3;j++)
                        board[i][j]='_';
                display(board);
                return true;
            }
            return false;
    }
    
    
    boolean beat()
    {
        for(int i=0;i<3;i++)
        {
            if(board[i][0] == board[i][1] && board[i][2] == '_')
                
                if(board[i][0]=='o')
                {
                    board[i][2]='o';
                    return true;
                }
        }
        for(int i=0;i<3;i++)
        {
            if(board[i][0] == board[i][2] && board[i][1] == '_')
                if(board[i][0]=='o')
                {
                    board[i][1]='o';
                    return true;
                }
            
        }    

        for(int i=0;i<3;i++)
        {
            if(board[i][2] == board[i][1] && board[i][0] == '_')
                if(board[i][2]=='o')
                {
                    board[i][0]='o';
                    return true;
                }
        }
        
        //check coulms if anyone has won;
        for(int j=0;j<3;j++)
        {
            if(board[0][j] == board[1][j] && board[2][j] == '_')
                if(board[0][j] == 'o')
                {
                    board[2][j] = 'o';
                    return true;
                }
        }

        for(int j=0;j<3;j++)
        {
            if(board[0][j] == board[2][j] && board[1][j] == '_')
                if(board[0][j] == 'o')
                {
                    board[1][j] = 'o';
                    return true;
                }
        }        
 
        for(int j=0;j<3;j++)
        {
            if(board[2][j] == board[1][j] && board[0][j] == '_')
                if(board[2][j] == 'o')
                {
                    board[0][j] = 'o';
                    return true;
                }
        }

        return false;
    }
    
    private void _0_0ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:

        board[0][0]='x';
        
        
        move bestMove = findBestmove(board);
        
        if(tie())
            return;
        
        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';
        

        
        AIplayed = true;
        display(board);
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }
    }                                    

    private void _0_1ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[0][1]='x';
        
        if(tie())
            return;
        
        move bestMove = findBestmove(board); 

        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';  
        
        AIplayed = true;
        display(board);
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }    
    }                                    

    private void _0_2ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[0][2]='x';
        
        if(tie())
            return;
        
        move bestMove = findBestmove(board); 
        
        
        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';
        
        AIplayed = true;        
        display(board);  
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }    
    }                                    

    private void _1_0ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[1][0]='x';
        
        if(tie())
            return;
                
        move bestMove = findBestmove(board); 

        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';
        AIplayed = true;        
        display(board);
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }      
    }                                    

    private void _1_1ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[1][1]='x';
        
        if(tie())
            return; 
        
        move bestMove = findBestmove(board);      

        
        if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';     
        
        display(board); 
        AIplayed = true;
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }      
    }                                    

    private void _1_2ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[1][2]='x';
        
        if(tie())
            return;
        
        move bestMove = findBestmove(board); 

        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';     
        
             
        AIplayed = true;
        display(board); 
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }       
    }                                    

    private void _2_0ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[2][0]='x';
        
        if(tie())
            return;   
        
        move bestMove = findBestmove(board); 
        
        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';   
          
        AIplayed = true;          
        display(board); 
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }   
    }                                    

    private void _2_1ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[2][1]='x';
        
        if(tie())
            return;
        
        move bestMove = findBestmove(board); 
        
        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';   
        
        AIplayed = true;  
        display(board);  

        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }       
    }                                    

    private void _2_2ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        board[2][2]='x';
        
        if(tie())
            return;
        
        move bestMove = findBestmove(board); 
        
        if(!AIplayed)
            board[1][1]='o';       
        else if(beat())
        {}
        else
            board[bestMove.row][bestMove.col]='o';   


        AIplayed = true;
        display(board);  
        
        if(tie()||Check())
        {
            AIplayed = false;
            return;
        }       
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Starting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Starting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Starting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Starting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Starting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private static javax.swing.JButton _0_0;
    private static javax.swing.JButton _0_1;
    private static javax.swing.JButton _0_2;
    private static javax.swing.JButton _1_0;
    private static javax.swing.JButton _1_1;
    private static javax.swing.JButton _1_2;
    private static javax.swing.JButton _2_0;
    private static javax.swing.JButton _2_1;
    private static javax.swing.JButton _2_2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration                   
}
